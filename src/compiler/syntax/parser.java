
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Feb 12 17:48:24 CET 2023
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Feb 12 17:48:24 CET 2023
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\004\000\002\076\002\000\002\002" +
    "\004\000\002\003\007\000\002\004\007\000\002\005\005" +
    "\000\002\006\004\000\002\006\004\000\002\006\003\000" +
    "\002\006\002\000\002\007\004\000\002\007\010\000\002" +
    "\010\007\000\002\010\005\000\002\010\005\000\002\011" +
    "\004\000\002\011\010\000\002\012\005\000\002\012\005" +
    "\000\002\013\004\000\002\013\004\000\002\013\003\000" +
    "\002\013\002\000\002\014\004\000\002\014\003\000\002" +
    "\015\004\000\002\015\003\000\002\017\003\000\002\017" +
    "\002\000\002\016\004\000\002\016\003\000\002\020\004" +
    "\000\002\020\003\000\002\021\010\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\023\003\000\002" +
    "\023\003\000\002\024\012\000\002\025\004\000\002\025" +
    "\003\000\002\026\006\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\030\004\000\002\030\003\000" +
    "\002\031\006\000\002\032\005\000\002\032\003\000\002" +
    "\074\003\000\002\074\003\000\002\034\004\000\002\035" +
    "\004\000\002\036\013\000\002\037\011\000\002\040\007" +
    "\000\002\041\004\000\002\041\003\000\002\041\002\000" +
    "\002\042\004\000\002\042\003\000\002\043\005\000\002" +
    "\043\006\000\002\044\006\000\002\044\007\000\002\047" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\046\003\000\002\046\003\000\002\050\003\000" +
    "\002\050\005\000\002\050\005\000\002\051\003\000\002" +
    "\051\005\000\002\051\005\000\002\052\003\000\002\052" +
    "\003\000\002\053\003\000\002\053\003\000\002\054\003" +
    "\000\002\054\005\000\002\054\005\000\002\054\004\000" +
    "\002\054\004\000\002\054\005\000\002\055\004\000\002" +
    "\055\004\000\002\056\005\000\002\056\005\000\002\057" +
    "\006\000\002\075\007\000\002\060\005\000\002\060\003" +
    "\000\002\060\002\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\061\003\000\002\061\003\000\002" +
    "\062\003\000\002\062\003\000\002\063\006\000\002\064" +
    "\003\000\002\064\003\000\002\064\003\000\002\065\011" +
    "\000\002\065\013\000\002\033\005\000\002\066\011\000" +
    "\002\067\003\000\002\067\003\000\002\067\003\000\002" +
    "\067\003\000\002\070\007\000\002\071\003\000\002\071" +
    "\003\000\002\071\003\000\002\071\003\000\002\071\003" +
    "\000\002\071\003\000\002\072\004\000\002\072\003\000" +
    "\002\073\004\000\002\073\003\000\002\073\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010b\000\004\023\000\001\002\000\004\002\u010d\001" +
    "\002\000\004\023\006\001\002\000\004\046\u0109\001\002" +
    "\000\004\002\uffff\001\002\000\014\011\ufff8\023\013\030" +
    "\017\032\022\046\024\001\002\000\004\011\356\001\002" +
    "\000\010\011\uffce\023\uffce\032\uffce\001\002\000\004\046" +
    "\u0102\001\002\000\010\011\ufff9\023\013\032\022\001\002" +
    "\000\010\011\uffcd\023\uffcd\032\uffcd\001\002\000\014\011" +
    "\uffeb\023\013\030\017\032\022\046\065\001\002\000\004" +
    "\046\364\001\002\000\010\011\uffe3\023\uffe3\032\uffe3\001" +
    "\002\000\004\011\356\001\002\000\004\046\331\001\002" +
    "\000\004\011\135\001\002\000\006\035\025\037\027\001" +
    "\002\000\004\046\045\001\002\000\004\011\ufffb\001\002" +
    "\000\012\012\034\013\031\017\035\046\033\001\002\000" +
    "\004\011\ufff7\001\002\000\004\044\106\001\002\000\004" +
    "\036\061\001\002\000\004\036\036\001\002\000\006\020" +
    "\uffdb\036\uffdb\001\002\000\006\020\uffdc\036\uffdc\001\002" +
    "\000\012\011\uffe5\023\013\032\022\046\045\001\002\000" +
    "\004\037\053\001\002\000\004\011\ufff3\001\002\000\010" +
    "\011\uffe6\023\013\032\022\001\002\000\012\011\uffe5\023" +
    "\013\032\022\046\045\001\002\000\004\011\uffe7\001\002" +
    "\000\012\011\uffd2\023\uffd2\032\uffd2\046\uffd2\001\002\000" +
    "\006\035\046\037\uffcf\001\002\000\004\046\045\001\002" +
    "\000\004\037\uffd0\001\002\000\004\011\uffe8\001\002\000" +
    "\012\011\uffd3\023\uffd3\032\uffd3\046\uffd3\001\002\000\010" +
    "\011\uffe4\023\uffe4\032\uffe4\001\002\000\010\012\056\017" +
    "\057\046\054\001\002\000\010\022\uffd4\034\uffd4\036\uffd4" +
    "\001\002\000\004\036\060\001\002\000\010\022\uffd5\034" +
    "\uffd5\036\uffd5\001\002\000\010\022\uffd6\034\uffd6\036\uffd6" +
    "\001\002\000\012\011\uffd1\023\uffd1\032\uffd1\046\uffd1\001" +
    "\002\000\014\011\uffeb\023\013\030\017\032\022\046\065" +
    "\001\002\000\010\011\uffec\023\013\032\022\001\002\000" +
    "\004\011\ufff4\001\002\000\014\011\uffeb\023\013\030\017" +
    "\032\022\046\065\001\002\000\006\035\067\037\070\001" +
    "\002\000\004\011\uffee\001\002\000\004\046\045\001\002" +
    "\000\010\012\034\017\035\046\072\001\002\000\004\036" +
    "\076\001\002\000\004\036\074\001\002\000\004\011\ufff2" +
    "\001\002\000\012\011\uffe5\023\013\032\022\046\045\001" +
    "\002\000\004\011\uffef\001\002\000\014\011\uffeb\023\013" +
    "\030\017\032\022\046\065\001\002\000\004\011\ufff0\001" +
    "\002\000\004\037\101\001\002\000\010\012\056\017\057" +
    "\046\054\001\002\000\004\036\103\001\002\000\012\011" +
    "\uffe5\023\013\032\022\046\045\001\002\000\004\011\ufff1" +
    "\001\002\000\004\011\uffed\001\002\000\010\004\107\006" +
    "\110\007\112\001\002\000\004\036\uffdd\001\002\000\004" +
    "\036\uffdf\001\002\000\004\036\113\001\002\000\004\036" +
    "\uffde\001\002\000\014\011\uffeb\023\013\030\017\032\022" +
    "\046\117\001\002\000\004\011\uffe9\001\002\000\014\011" +
    "\uffe1\023\uffe1\030\uffe1\032\uffe1\046\uffe1\001\002\000\004" +
    "\011\ufff5\001\002\000\006\035\067\037\123\001\002\000" +
    "\014\011\uffeb\023\013\030\017\032\022\046\117\001\002" +
    "\000\004\011\uffea\001\002\000\014\011\uffe2\023\uffe2\030" +
    "\uffe2\032\uffe2\046\uffe2\001\002\000\012\012\034\013\124" +
    "\017\035\046\072\001\002\000\004\044\125\001\002\000" +
    "\010\004\107\006\110\007\112\001\002\000\004\036\127" +
    "\001\002\000\014\011\uffe0\023\uffe0\030\uffe0\032\uffe0\046" +
    "\uffe0\001\002\000\004\037\131\001\002\000\010\012\056" +
    "\017\057\046\054\001\002\000\004\036\133\001\002\000" +
    "\012\011\uffe5\023\013\032\022\046\045\001\002\000\004" +
    "\011\ufff6\001\002\000\016\015\uff81\016\146\024\142\026" +
    "\153\031\136\046\155\001\002\000\014\004\211\006\163" +
    "\007\167\033\215\046\270\001\002\000\020\014\uff88\015" +
    "\uff88\016\uff88\024\uff88\026\uff88\031\uff88\046\uff88\001\002" +
    "\000\004\015\320\001\002\000\020\014\uff8a\015\uff8a\016" +
    "\uff8a\024\uff8a\026\uff8a\031\uff8a\046\uff8a\001\002\000\004" +
    "\033\306\001\002\000\020\014\uff89\015\uff89\016\uff89\024" +
    "\uff89\026\uff89\031\uff89\046\uff89\001\002\000\014\016\146" +
    "\024\142\026\153\031\136\046\155\001\002\000\006\044" +
    "\uff99\045\252\001\002\000\014\004\211\006\163\007\167" +
    "\033\215\046\270\001\002\000\020\014\uff8b\015\uff8b\016" +
    "\uff8b\024\uff8b\026\uff8b\031\uff8b\046\uff8b\001\002\000\004" +
    "\044\261\001\002\000\020\014\uff86\015\uff86\016\uff86\024" +
    "\uff86\026\uff86\031\uff86\046\uff86\001\002\000\020\014\uff87" +
    "\015\uff87\016\uff87\024\uff87\026\uff87\031\uff87\046\uff87\001" +
    "\002\000\014\004\160\006\163\007\167\033\173\046\176" +
    "\001\002\000\016\015\uff82\016\uff84\024\uff84\026\uff84\031" +
    "\uff84\046\uff84\001\002\000\010\033\157\044\uff9a\045\156" +
    "\001\002\000\004\046\256\001\002\000\020\004\160\006" +
    "\163\007\167\033\173\034\uffa0\035\uffa0\046\176\001\002" +
    "\000\020\034\uffb8\035\uffb8\036\uffb8\040\uffbd\041\uffbd\042" +
    "\203\043\201\001\002\000\006\034\254\035\206\001\002" +
    "\000\022\010\uffb5\021\uffb5\027\uffb5\034\uffb5\035\uffb5\036" +
    "\uffb5\040\uffb5\041\uffb5\001\002\000\016\010\uffb2\021\uffb2" +
    "\027\uffb2\034\uffb2\035\uffb2\036\uffb2\001\002\000\012\034" +
    "\uff9c\035\uff9c\036\uff9c\045\252\001\002\000\006\034\uffa1" +
    "\035\uffa1\001\002\000\012\010\217\034\uff9d\035\uff9d\036" +
    "\uff9d\001\002\000\016\010\uffb1\021\uffb1\027\uffb1\034\uffb1" +
    "\035\uffb1\036\uffb1\001\002\000\010\034\uff9e\035\uff9e\036" +
    "\uff9e\001\002\000\010\034\uff9b\035\uff9b\036\uff9b\001\002" +
    "\000\006\040\235\041\234\001\002\000\014\004\244\006" +
    "\163\007\167\033\245\046\247\001\002\000\016\010\uffae" +
    "\021\uffae\027\uffae\034\uffae\035\uffae\036\uffae\001\002\000" +
    "\022\010\200\034\uff9f\035\uff9f\036\uff9f\040\uffbb\041\uffbb" +
    "\042\203\043\201\001\002\000\026\010\200\033\204\034" +
    "\uffbe\035\uffbe\036\uffbe\040\uffbc\041\uffbc\042\203\043\201" +
    "\045\156\001\002\000\010\004\231\033\232\046\225\001" +
    "\002\000\014\004\211\006\163\007\167\033\215\046\213" +
    "\001\002\000\010\004\uffaf\033\uffaf\046\uffaf\001\002\000" +
    "\016\010\uffab\021\uffab\027\uffab\034\uffab\035\uffab\036\uffab" +
    "\001\002\000\010\004\uffb0\033\uffb0\046\uffb0\001\002\000" +
    "\020\004\160\006\163\007\167\033\173\034\uffa0\035\uffa0" +
    "\046\176\001\002\000\006\034\207\035\206\001\002\000" +
    "\014\004\160\006\163\007\167\033\173\046\176\001\002" +
    "\000\026\010\uffa4\021\uffa4\027\uffa4\034\uffa4\035\uffa4\036" +
    "\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\001\002\000\006" +
    "\034\uffa2\035\uffa2\001\002\000\006\042\203\043\201\001" +
    "\002\000\016\010\uffa7\021\uffa7\027\uffa7\034\uffa7\035\uffa7" +
    "\036\uffa7\001\002\000\012\010\200\033\204\042\203\043" +
    "\201\001\002\000\010\010\200\042\203\043\201\001\002" +
    "\000\014\004\211\006\163\007\167\033\215\046\213\001" +
    "\002\000\006\010\217\034\220\001\002\000\014\004\211" +
    "\006\163\007\167\033\215\046\213\001\002\000\016\010" +
    "\uffac\021\uffac\027\uffac\034\uffac\035\uffac\036\uffac\001\002" +
    "\000\016\010\uffad\021\uffad\027\uffad\034\uffad\035\uffad\036" +
    "\uffad\001\002\000\016\010\uffaa\021\uffaa\027\uffaa\034\uffaa" +
    "\035\uffaa\036\uffaa\001\002\000\010\004\224\033\227\046" +
    "\225\001\002\000\022\010\uffb8\021\uffb8\027\uffb8\034\uffb8" +
    "\035\uffb8\036\uffb8\040\uffbd\041\uffbd\001\002\000\024\010" +
    "\uffbc\021\uffbc\027\uffbc\033\204\034\uffbc\035\uffbc\036\uffbc" +
    "\040\uffbc\041\uffbc\001\002\000\022\010\uffbb\021\uffbb\027" +
    "\uffbb\034\uffbb\035\uffbb\036\uffbb\040\uffbb\041\uffbb\001\002" +
    "\000\010\004\231\033\232\046\225\001\002\000\016\010" +
    "\uffa9\021\uffa9\027\uffa9\034\uffa9\035\uffa9\036\uffa9\001\002" +
    "\000\022\010\uffbd\021\uffbd\027\uffbd\034\uffbd\035\uffbd\036" +
    "\uffbd\040\uffbd\041\uffbd\001\002\000\010\004\231\033\232" +
    "\046\225\001\002\000\010\034\236\040\235\041\234\001" +
    "\002\000\010\004\uffb9\033\uffb9\046\uffb9\001\002\000\010" +
    "\004\uffba\033\uffba\046\uffba\001\002\000\022\010\uffb6\021" +
    "\uffb6\027\uffb6\034\uffb6\035\uffb6\036\uffb6\040\uffb3\041\uffb3" +
    "\001\002\000\010\004\231\033\232\046\225\001\002\000" +
    "\022\010\uffb4\021\uffb4\027\uffb4\034\uffb4\035\uffb4\036\uffb4" +
    "\040\235\041\234\001\002\000\010\034\242\040\235\041" +
    "\234\001\002\000\022\010\uffb3\021\uffb3\027\uffb3\034\uffb3" +
    "\035\uffb3\036\uffb3\040\uffb3\041\uffb3\001\002\000\022\010" +
    "\uffa8\021\uffa8\027\uffa8\034\uffa8\035\uffa8\036\uffa8\040\235" +
    "\041\234\001\002\000\014\034\uffbd\040\uffbd\041\uffbd\042" +
    "\203\043\201\001\002\000\014\004\244\006\163\007\167" +
    "\033\245\046\247\001\002\000\016\010\200\034\uffbb\040" +
    "\uffbb\041\uffbb\042\203\043\201\001\002\000\020\010\200" +
    "\033\204\034\uffbc\040\uffbc\041\uffbc\042\203\043\201\001" +
    "\002\000\010\004\231\033\232\046\225\001\002\000\022" +
    "\010\uffb7\021\uffb7\027\uffb7\034\uffb7\035\uffb7\036\uffb7\040" +
    "\235\041\234\001\002\000\004\046\253\001\002\000\014" +
    "\034\uffa5\035\uffa5\036\uffa5\044\uffa5\045\uffa5\001\002\000" +
    "\004\036\255\001\002\000\020\014\uffa3\015\uffa3\016\uffa3" +
    "\024\uffa3\026\uffa3\031\uffa3\046\uffa3\001\002\000\014\034" +
    "\uffa6\035\uffa6\036\uffa6\044\uffa6\045\uffa6\001\002\000\004" +
    "\036\260\001\002\000\020\014\uff92\015\uff92\016\uff92\024" +
    "\uff92\026\uff92\031\uff92\046\uff92\001\002\000\014\004\160" +
    "\006\163\007\167\033\173\046\176\001\002\000\004\036" +
    "\263\001\002\000\020\014\uff98\015\uff98\016\uff98\024\uff98" +
    "\026\uff98\031\uff98\046\uff98\001\002\000\004\027\271\001" +
    "\002\000\010\010\217\021\uff97\027\uff97\001\002\000\006" +
    "\021\uff96\027\uff96\001\002\000\014\010\200\021\uff95\027" +
    "\uff95\042\203\043\201\001\002\000\016\010\200\021\uffbe" +
    "\027\uffbe\033\204\042\203\043\201\001\002\000\014\016" +
    "\146\024\142\026\153\031\136\046\155\001\002\000\020" +
    "\014\274\015\275\016\146\024\142\026\153\031\136\046" +
    "\155\001\002\000\020\014\uff84\015\uff84\016\uff84\024\uff84" +
    "\026\uff84\031\uff84\046\uff84\001\002\000\014\016\146\024" +
    "\142\026\153\031\136\046\155\001\002\000\004\016\277" +
    "\001\002\000\020\014\uff85\015\uff85\016\uff85\024\uff85\026" +
    "\uff85\031\uff85\046\uff85\001\002\000\004\036\300\001\002" +
    "\000\020\014\uff94\015\uff94\016\uff94\024\uff94\026\uff94\031" +
    "\uff94\046\uff94\001\002\000\016\015\302\016\146\024\142" +
    "\026\153\031\136\046\155\001\002\000\004\016\303\001" +
    "\002\000\004\036\304\001\002\000\020\014\uff93\015\uff93" +
    "\016\uff93\024\uff93\026\uff93\031\uff93\046\uff93\001\002\000" +
    "\016\015\uff83\016\uff85\024\uff85\026\uff85\031\uff85\046\uff85" +
    "\001\002\000\016\004\160\005\307\006\163\007\167\033" +
    "\173\046\314\001\002\000\004\034\uff90\001\002\000\006" +
    "\010\217\034\uff8e\001\002\000\004\034\uff8d\001\002\000" +
    "\004\034\uff8f\001\002\000\004\034\315\001\002\000\020" +
    "\010\200\033\204\034\uffbe\040\uffbc\041\uffbc\042\203\043" +
    "\201\001\002\000\004\036\316\001\002\000\020\014\uff8c" +
    "\015\uff8c\016\uff8c\024\uff8c\026\uff8c\031\uff8c\046\uff8c\001" +
    "\002\000\004\002\ufffe\001\002\000\004\046\321\001\002" +
    "\000\004\036\322\001\002\000\004\002\ufffc\001\002\000" +
    "\004\021\324\001\002\000\014\016\146\024\142\026\153" +
    "\031\136\046\155\001\002\000\016\015\326\016\146\024" +
    "\142\026\153\031\136\046\155\001\002\000\004\021\327" +
    "\001\002\000\004\036\330\001\002\000\020\014\uff91\015" +
    "\uff91\016\uff91\024\uff91\026\uff91\031\uff91\046\uff91\001\002" +
    "\000\004\033\332\001\002\000\006\034\uffc5\046\045\001" +
    "\002\000\004\046\045\001\002\000\004\046\uffc3\001\002" +
    "\000\004\034\347\001\002\000\004\034\uffc6\001\002\000" +
    "\004\037\340\001\002\000\012\012\056\017\057\022\341" +
    "\046\054\001\002\000\010\012\056\017\057\046\054\001" +
    "\002\000\010\022\343\034\uffc2\036\344\001\002\000\004" +
    "\036\345\001\002\000\004\046\uffc0\001\002\000\004\046" +
    "\uffbf\001\002\000\004\034\uffc1\001\002\000\004\026\350" +
    "\001\002\000\006\012\034\017\035\001\002\000\004\020" +
    "\352\001\002\000\014\011\uffeb\023\013\030\017\032\022" +
    "\046\065\001\002\000\004\011\uffca\001\002\000\004\046" +
    "\uffc4\001\002\000\004\034\uffc7\001\002\000\014\016\146" +
    "\024\142\026\153\031\136\046\155\001\002\000\010\011" +
    "\uffcb\023\uffcb\032\uffcb\001\002\000\016\015\361\016\146" +
    "\024\142\026\153\031\136\046\155\001\002\000\004\046" +
    "\362\001\002\000\004\036\363\001\002\000\010\011\uffc8" +
    "\023\uffc8\032\uffc8\001\002\000\004\020\365\001\002\000" +
    "\004\025\366\001\002\000\004\046\370\001\002\000\006" +
    "\015\uffd8\046\uffd8\001\002\000\004\037\376\001\002\000" +
    "\006\015\373\046\370\001\002\000\006\015\uffd9\046\uffd9" +
    "\001\002\000\004\025\374\001\002\000\004\036\375\001" +
    "\002\000\014\011\uffda\023\uffda\030\uffda\032\uffda\046\uffda" +
    "\001\002\000\010\012\056\017\057\046\054\001\002\000" +
    "\004\036\u0100\001\002\000\006\015\uffd7\046\uffd7\001\002" +
    "\000\004\011\ufffa\001\002\000\004\033\u0103\001\002\000" +
    "\006\034\uffc5\046\045\001\002\000\004\034\u0105\001\002" +
    "\000\004\020\u0106\001\002\000\014\011\uffeb\023\013\030" +
    "\017\032\022\046\065\001\002\000\004\011\uffc9\001\002" +
    "\000\010\011\uffcc\023\uffcc\032\uffcc\001\002\000\004\033" +
    "\u010a\001\002\000\004\034\u010b\001\002\000\004\020\u010c" +
    "\001\002\000\014\011\ufffd\023\ufffd\030\ufffd\032\ufffd\046" +
    "\ufffd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010b\000\006\002\003\076\004\001\001\000\002\001" +
    "\001\000\006\003\006\004\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\006\022\016\013\024\015\034" +
    "\011\035\014\036\010\037\020\074\017\001\001\000\004" +
    "\040\u0107\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\034\011\035\014\036\010\037\020\074\051\001\001" +
    "\000\002\001\001\000\022\013\u0100\016\061\024\063\034" +
    "\011\035\014\036\010\037\020\074\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\356\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\025\001\001" +
    "\000\004\032\127\001\001\000\002\001\001\000\006\010" +
    "\027\023\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\015\037\016\040\017\042\030\041" +
    "\031\043\032\036\034\011\035\014\036\010\037\020\074" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\034\011\035\014\036\010\037\020\074\051\001\001\000" +
    "\024\016\040\017\047\031\050\032\036\034\011\035\014" +
    "\036\010\037\020\074\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\013\062\016\061\024\063\034\011" +
    "\035\014\036\010\037\020\074\017\001\001\000\014\034" +
    "\011\035\014\036\010\037\020\074\051\001\001\000\002" +
    "\001\001\000\022\013\104\016\061\024\063\034\011\035" +
    "\014\036\010\037\020\074\017\001\001\000\004\011\065" +
    "\001\001\000\002\001\001\000\004\032\077\001\001\000" +
    "\006\012\072\023\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\015\074\016\040\017" +
    "\042\030\041\031\043\032\036\034\011\035\014\036\010" +
    "\037\020\074\017\001\001\000\002\001\001\000\022\013" +
    "\076\016\061\024\063\034\011\035\014\036\010\037\020" +
    "\074\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\101\001\001\000\002\001\001\000\030\015\103" +
    "\016\040\017\042\030\041\031\043\032\036\034\011\035" +
    "\014\036\010\037\020\074\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\013\113\014\115\016\061\020\117\021\114\024" +
    "\063\034\011\035\014\036\010\037\020\074\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\065\001\001\000\024\013\120\016\061\021\121" +
    "\024\063\034\011\035\014\036\010\037\020\074\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\072" +
    "\023\070\001\001\000\002\001\001\000\004\022\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\131\001\001\000\002\001\001\000\030\015" +
    "\133\016\040\017\042\030\041\031\043\032\036\034\011" +
    "\035\014\036\010\037\020\074\017\001\001\000\002\001" +
    "\001\000\030\033\140\056\144\062\147\063\151\065\142" +
    "\066\136\070\146\071\153\072\143\073\137\075\150\001" +
    "\001\000\014\047\265\052\173\054\264\057\266\064\322" +
    "\001\001\000\002\001\001\000\004\005\316\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\033\140\056\144\062\147\063\151\065\142\066\136\070" +
    "\146\071\304\075\150\001\001\000\002\001\001\000\014" +
    "\047\265\052\173\054\264\057\266\064\263\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\045\161\047\170\050\167\051\171\052" +
    "\173\054\165\056\163\057\174\061\256\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\045" +
    "\161\047\170\050\167\051\171\052\173\054\165\056\163" +
    "\057\174\060\160\061\164\001\001\000\004\053\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\247\001\001\000\014\045\161\051\232\052\173\054" +
    "\215\057\245\001\001\000\002\001\001\000\006\053\176" +
    "\055\221\001\001\000\006\053\176\055\201\001\001\000" +
    "\010\045\161\051\242\057\225\001\001\000\010\052\173" +
    "\054\211\057\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\045\161\047\170\050\167" +
    "\051\171\052\173\054\165\056\163\057\174\060\204\061" +
    "\164\001\001\000\002\001\001\000\024\045\161\047\170" +
    "\050\167\051\171\052\173\054\165\056\163\057\174\061" +
    "\207\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\222\001\001\000\002\001\001\000\006\053\176\055" +
    "\201\001\001\000\006\053\176\055\221\001\001\000\010" +
    "\052\173\054\215\057\213\001\001\000\002\001\001\000" +
    "\010\052\173\054\220\057\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\045\161\050" +
    "\227\051\171\057\225\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\045\161\051\232\057" +
    "\225\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\045\161\051\240\057\225\001\001\000\004\046\236\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\045\161\051\237\057\225\001\001\000\004\046" +
    "\236\001\001\000\004\046\236\001\001\000\002\001\001" +
    "\000\004\046\236\001\001\000\004\053\222\001\001\000" +
    "\014\045\161\051\240\052\173\054\215\057\245\001\001" +
    "\000\006\053\176\055\221\001\001\000\006\053\176\055" +
    "\201\001\001\000\010\045\161\051\250\057\225\001\001" +
    "\000\004\046\236\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\045\161\047" +
    "\170\050\167\051\171\052\173\054\165\056\163\057\174" +
    "\061\261\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\053\176\055\221\001\001\000\006\053\176\055\201\001" +
    "\001\000\026\033\140\056\144\062\147\063\151\065\142" +
    "\066\136\070\146\071\272\072\271\075\150\001\001\000" +
    "\024\033\140\056\144\062\147\063\151\065\142\066\136" +
    "\070\146\071\275\075\150\001\001\000\002\001\001\000" +
    "\026\033\140\056\144\062\147\063\151\065\142\066\136" +
    "\070\146\071\272\072\300\075\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\033\140\056\144\062\147\063\151\065\142\066" +
    "\136\070\146\071\275\075\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\045\161\047\310\050\311\051\171\052\173\054\307" +
    "\057\245\067\312\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\053\176\055\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\033" +
    "\140\056\144\062\147\063\151\065\142\066\136\070\146" +
    "\071\272\072\324\075\150\001\001\000\024\033\140\056" +
    "\144\062\147\063\151\065\142\066\136\070\146\071\275" +
    "\075\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\032\336\041\334" +
    "\042\332\043\335\044\333\001\001\000\010\032\336\043" +
    "\354\044\353\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\341\001" +
    "\001\000\004\027\345\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\350\001\001\000\002" +
    "\001\001\000\022\013\352\016\061\024\063\034\011\035" +
    "\014\036\010\037\020\074\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\033\140\056" +
    "\144\062\147\063\151\065\142\066\136\070\146\071\272" +
    "\072\357\075\150\001\001\000\002\001\001\000\024\033" +
    "\140\056\144\062\147\063\151\065\142\066\136\070\146" +
    "\071\275\075\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\025\370\026\366\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\371\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\376\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\032\336\041" +
    "\u0103\042\332\043\335\044\333\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\013\u0106\016\061\024\063\034" +
    "\011\035\014\036\010\037\020\074\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // listaSentenciasPV ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentenciasPV",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // listaSentenciasPV ::= sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentenciasPV",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // listaSentenciasPV ::= listaSentencias sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentenciasPV",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // listaSentencias ::= sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentencias",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // listaSentencias ::= listaSentencias sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentencias",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentencias ::= sentInvFunc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sentencias ::= sentAsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sentencias ::= sentWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentencias ::= sentIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentencias ::= sentReturn 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sentencias ::= sentEntrada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // sentEntrada ::= PUTLINE APERTURA parametroEntrada CIERRE PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentEntrada",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // parametroEntrada ::= exprGeneral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroEntrada",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // parametroEntrada ::= exprLog 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroEntrada",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // parametroEntrada ::= exprArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroEntrada",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // parametroEntrada ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroEntrada",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // sentWhile ::= WHILE exprCondicional LOOP listaSentencias END LOOP PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentWhile",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sentReturn ::= RETURN expresion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentReturn",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sentIf ::= IF exprCondicional THEN listaSentencias ELSE listaSentencias END IF PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentIf",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sentIf ::= IF exprCondicional THEN listaSentencias END IF PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentIf",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // exprCondicional ::= invFunc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprCondicional",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // exprCondicional ::= exprGeneral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprCondicional",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // exprCondicional ::= exprLog 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprCondicional",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sentAsig ::= tipoRef DECLARACION expresion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentAsig",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // tipoRef ::= exprReg 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRef",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // tipoRef ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRef",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresion ::= exprGeneral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion ::= exprReg 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion ::= exprLog 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion ::= exprArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= invFunc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // paraInvFunc ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paraInvFunc",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // paraInvFunc ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paraInvFunc",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // paraInvFunc ::= paraInvFunc COMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paraInvFunc",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sentInvFunc ::= IDENTIFICADOR APERTURA paraInvFunc CIERRE PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentInvFunc",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // invFunc ::= IDENTIFICADOR APERTURA paraInvFunc CIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("invFunc",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // exprReg ::= exprReg PUNTO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprReg",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // exprReg ::= IDENTIFICADOR PUNTO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprReg",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // exprLog2 ::= AND exprLog 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLog2",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // exprLog2 ::= operadorLog exprArit2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLog2",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // exprLog ::= NUM operadorLog exprArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLog",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // exprLog ::= invFunc exprLog2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLog",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // exprLog ::= IDENTIFICADOR exprLog2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLog",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // exprLog ::= APERTURA exprLog CIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLog",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // exprLog ::= exprLog AND exprLog 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLog",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // exprLog ::= tipoLog 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLog",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operadorLog ::= DISTINTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLog",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operadorLog ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLog",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tipoLog ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoLog",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tipoLog ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoLog",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // exprArit2 ::= APERTURA exprArit2 CIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprArit2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // exprArit2 ::= exprArit2 operadorArit exprArit2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprArit2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // exprArit2 ::= tipoArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprArit2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // exprArit ::= APERTURA exprArit2 CIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprArit",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exprArit ::= exprArit2 operadorArit exprArit2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprArit",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // exprArit ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprArit",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operadorArit ::= MULTIP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operadorArit ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipoArit ::= invFunc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoArit",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipoArit ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoArit",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tipoArit ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoArit",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exprGeneral ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprGeneral",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parametro2 ::= identificadores DOSPUNTOS tipo OUT PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parametro2 ::= identificadores DOSPUNTOS tipo PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parametro ::= identificadores DOSPUNTOS OUT tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parametro ::= identificadores DOSPUNTOS tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // listaParametros ::= parametro2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // listaParametros ::= listaParametros parametro2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // defParametro ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defParametro",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // defParametro ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defParametro",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // defParametro ::= listaParametros parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defParametro",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parteBeginSub ::= BEGIN listaSentencias END IDENTIFICADOR PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteBeginSub",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parteDeclaraP ::= PROCEDURE IDENTIFICADOR APERTURA defParametro CIERRE IS listaDeclaracionesTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteDeclaraP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parteDeclaraF ::= FUNCTION IDENTIFICADOR APERTURA defParametro CIERRE RETURN tipoPri IS listaDeclaracionesTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteDeclaraF",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // procedimiento ::= parteDeclaraP parteBeginSub 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // funcion ::= parteDeclaraF parteBeginSub 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipoSubprograma ::= procedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSubprograma",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipoSubprograma ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSubprograma",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // identificadores ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificadores",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // identificadores ::= IDENTIFICADOR COMA identificadores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificadores",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // var ::= identificadores DOSPUNTOS tipo PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // listaVar ::= var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaVar",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // listaVar ::= listaVar var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaVar",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipo ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipo ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // registro ::= IDENTIFICADOR DOSPUNTOS tipo PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("registro",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // listaRegistro ::= registro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaRegistro",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listaRegistro ::= listaRegistro registro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaRegistro",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // record ::= TYPE IDENTIFICADOR IS RECORD listaRegistro END RECORD PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipoPri ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoPri",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipoPri ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoPri",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // valor ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // valor ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // valor ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // constante ::= IDENTIFICADOR DOSPUNTOS CONSTANT DECLARACION valor PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // listaConst ::= constante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaConst",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // listaConst ::= listaConst constante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaConst",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // listaSubprogramas ::= tipoSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSubprogramas",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // listaSubprogramas ::= listaSubprogramas tipoSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSubprogramas",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // listaSubprogramasPV ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSubprogramasPV",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // listaSubprogramasPV ::= listaSubprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSubprogramasPV",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // listaVarPV ::= listaSubprogramasPV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaVarPV",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listaVarPV ::= listaVar listaSubprogramasPV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaVarPV",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listaConstPV ::= listaDeclaracionesTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaConstPV",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // listaConstPV ::= listaConst listaDeclaracionesTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaConstPV",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listaDeclaracionesTipo ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaracionesTipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listaDeclaracionesTipo ::= listaSubprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaracionesTipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // listaDeclaracionesTipo ::= record listaDeclaracionesTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaracionesTipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // listaDeclaracionesTipo ::= IDENTIFICADOR lista3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaracionesTipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista4 ::= IDENTIFICADOR PUNTOCOMA listaVarPV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista4",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista4 ::= tipoPri PUNTOCOMA listaDeclaracionesTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista4",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista3 ::= COMA identificadores DOSPUNTOS tipo PUNTOCOMA listaVarPV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista3",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista3 ::= DOSPUNTOS lista4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista3",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista2 ::= IDENTIFICADOR PUNTOCOMA listaVarPV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista2 ::= tipoPri PUNTOCOMA listaDeclaracionesTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista2 ::= CONSTANT DECLARACION valor PUNTOCOMA listaConstPV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista1 ::= COMA identificadores DOSPUNTOS tipo PUNTOCOMA listaVarPV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista1 ::= DOSPUNTOS lista2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listaDeclaraciones ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listaDeclaraciones ::= listaSubprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // listaDeclaraciones ::= record listaDeclaracionesTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // listaDeclaraciones ::= IDENTIFICADOR lista1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // final ::= END IDENTIFICADOR PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= PROCEDURE IDENTIFICADOR APERTURA CIERRE IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= inicio listaDeclaraciones BEGIN listaSentenciasPV final 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   		
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

